Activity_main.xml:- 
<?xml version="1.0" encoding="utf-8"?> 
<LinearLayout 
xmlns:android="http://schemas.android.com/apk/res/android" 
 xmlns:app="http://schemas.android.com/apk/res-auto" 
 xmlns:tools="http://schemas.android.com/tools" 
 android:layout_width="match_parent" 
 android:orientation="vertical" 
 android:gravity="center" 
 android:layout_height="match_parent" 
 tools:context=".MainActivity"> 
 <!-- Setting the Chronometer --> 
 <Chronometer 
 android:id="@+id/chronometer" 
 android:layout_width="wrap_content" 
 android:layout_height="wrap_content" 
 android:textSize="30sp" /> 
 <!-- Setting the Start button --> 
 <Button 
 android:layout_width="wrap_content" 
 android:layout_height="wrap_content" 
 android:onClick="startChronometer" 
 android:text="Start" /> 
 <!-- Setting the Pause Button --> 
 <Button 
 android:layout_width="wrap_content" 
 android:layout_height="wrap_content" 
 android:text="Pause" 
 android:onClick="pauseChronometer"/> 
 <!-- Setting the Reset Button --> 
 <Button 
 android:layout_width="wrap_content" 
 android:layout_height="wrap_content" 
 android:text="Reset" 
 android:onClick="resetChronometer"/> 
</LinearLayout>
MainActivity.java: 
package com.example.stopwatch; 
import androidx.appcompat.app.AppCompatActivity; 
import android.os.Bundle; 
import android.os.SystemClock; 
import android.view.View; 
import android.widget.Chronometer; 
public class MainActivity extends AppCompatActivity { 
 //Declaring the variable for the program. 
 private Chronometer chronometer; 
 private boolean running; 
 private long pauseOffSet; 
 @Override 
 protected void onCreate(Bundle savedInstanceState) { 
 super.onCreate(savedInstanceState); 
 setContentView(R.layout.activity_main); 
 chronometer = findViewById(R.id.chronometer); 
 chronometer.setFormat("Time: %s"); 
 } 
 //Creating the start Chronometer function for starting the 
Timer. 
 public void startChronometer(View view) { 
 if(!running){ 
 chronometer.setBase(SystemClock.elapsedRealtime() - 
pauseOffSet); 
 chronometer.start(); 
 running = true; 
 } 
 } 
 //Creating the pause Chronometer function for Pausing the Timer. 
 public void pauseChronometer(View view) { 
 if (running){ 
 chronometer.stop(); 
 pauseOffSet = SystemClock.elapsedRealtime() - 
chronometer.getBase(); 
 running = false; 
 } 
 } 
 //Creating the reset Chronometer function for reseing the Timer. 
 public void resetChronometer(View view) { 
 chronometer.setBase(SystemClock.elapsedRealtime()); 
 pauseOffSet = 0; 
 } 
}
